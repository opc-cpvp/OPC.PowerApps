trigger: none

pr: none

pool:
  vmImage: 'vs2017-win2016'

variables:
  crm.username: 'SVC_OPC_CRM_Admin@priv.gc.ca'
  SolutionName: 'Compliance'

steps:
- checkout: self
  persistCredentials: true

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMToolInstaller.MSCRMToolInstaller@9
  displayName: 'MSCRM Tool Installer'

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMExportSolution.MSCRMExportSolution@10
  displayName: 'MSCRM Export Solution'
  inputs:
    crmConnectionString: 'AuthType=Office365;Username=$(crm.username);Password=$(crm.password);Url=$(crm.url)'
    solutionName: '$(SolutionName)'
    exportManaged: true
    outputPath: '$(Agent.TempDirectory)'

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMExtractSolution.MSCRMExtractSolution@10
  displayName: 'MSCRM Extract Solution'
  inputs:
    unpackedFilesFolder: '$(Build.SourcesDirectory)\src\$(SolutionName).Solution\Solution'
    packageType: Both
    solutionFile: '$(Agent.TempDirectory)\$(SolutionName).zip'
    localize: false


- powershell: |
    
    npm install jsonlint -g
    Get-ChildItem src/$(SolutionName).Solution/Solution/Workflows -Filter *.json | foreach { 
      echo "Linting $_.Name"
      jsonlint $_.FullName --in-place 
    }

  displayName: 'Lint Json Workflows'


- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/XrmDefinitelyTyped/packages.config'
    feedsToUse: 'select'
    restoreDirectory: '../packages'
  displayName: 'Restore XrmDefinitelyTyped project packages'

- powershell: |
    
    echo "Preparing to update all Typescript early bound type definitions..."

    $xdtexe = Get-ChildItem src/packages -Filter XrmDefinitelyTyped.exe -recurse | select -first 1 -ExpandProperty FullName
    & $xdtexe /url:$(crm.url)"/XRMServices/2011/Organization.svc" `
      /out:"$(Build.SourcesDirectory)/src/$(SolutionName).WebResources/@types/xrmdefinitelytyped" `
      /jsLib:"$(Build.SourcesDirectory)/src/$(SolutionName).WebResources/js/lib/xrmquery" `
      /web:"" `
      /solutions:"$(SolutionName)" `
      /username:"$(crm.username)" `
      /password:"$(crm.password)" `
      /oneFile:"true"

    echo "Succesfully updated all Typescript early bound type definitions"

  displayName: 'Update TypeScript entities'

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/CrmSvcUtil.Filter/packages.config'
    feedsToUse: 'select'
    restoreDirectory: '../packages'
  displayName: 'Restore CrmSvcUtil.Filter project packages'

- task: MSBuild@1
  inputs:
    solution: '**/CrmSvcUtil.Filter.csproj'
  displayName: 'Build CrmSvcUtil.Filter'

- powershell: |
    
    echo "Preparing to update all C# early bound entities..."

    $crmsvcexe = Get-ChildItem src/CrmSvcUtil.Filter -Filter CrmSvcUtil.exe -recurse | select -first 1 -ExpandProperty FullName
    & $crmsvcexe /url:$(crm.url)"/XRMServices/2011/Organization.svc" `
      /out:"$(Build.SourcesDirectory)/src/$(SolutionName).Entities/Entities.cs" `
      /namespace:"$(SolutionName).Entities" `
      /serviceContextName:"$(SolutionName)" `
      /username:"$(crm.username)" `
      /password:"$(crm.password)"

    echo "Succesfully updated all C# early bound entities"
    
    echo "Preparing to update all C# early bound optionsets..."

    & $crmsvcexe /url:$(crm.url)"/XRMServices/2011/Organization.svc" `
      /out:"$(Build.SourcesDirectory)/src/$(SolutionName).Entities/OptionSets.cs" `
      /namespace:"$(SolutionName).Entities" `
      /codewriterfilter:"CrmSvcUtil.Filter.GenerateOptionSetEnums.FilteringService, CrmSvcUtil.Filter" `
      /codecustomization:"CrmSvcUtil.Filter.GenerateOptionSetEnums.CodeCustomizationService, CrmSvcUtil.Filter" `
      /namingservice:"CrmSvcUtil.Filter.GenerateOptionSetEnums.NamingService, CrmSvcUtil.Filter" `
      /serviceContextName:"$(SolutionName)" `
      /username:"$(crm.username)" `
      /password:"$(crm.password)"

    echo "Succesfully updated all C# early bound optionsets"
      
  displayName: 'Update C# entities and optionsets'

- task: print-fs-structure-task@1

- powershell: |
   $branch = "$(Build.SourceBranch)"
   $branch = $branch.Replace("refs/heads/", "")
   
   echo "Committing all CDS solution changes"
   git config user.email "nepasrepondre-noreply@priv.gc.ca"
   git config user.name "opc-buildbot"
   git checkout $branch
   git add --all
   git commit -m "Update Solution - $(SolutionName): $(CommitMessage)"
   
   echo "Push solution changes to the remote repository"
   git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin $branch
  displayName: 'Commit Unpacked Solution to the Repository'
