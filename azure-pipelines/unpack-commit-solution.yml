trigger: none

pr: none

pool:
  vmImage: 'vs2017-win2016'

variables:
  crm.username: 'SVC_OPC_CRM_Admin@priv.gc.ca'
  SolutionName: 'Compliance'

steps:
- checkout: self
  persistCredentials: true

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMToolInstaller.MSCRMToolInstaller@9
  displayName: 'MSCRM Tool Installer'

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMExportSolution.MSCRMExportSolution@10
  displayName: 'MSCRM Export Solution'
  inputs:
    crmConnectionString: 'AuthType=Office365;Username=$(crm.username);Password=$(crm.password);Url=$(crm.url)'
    solutionName: '$(SolutionName)'
    exportManaged: false
    outputPath: '$(Agent.TempDirectory)'

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMExtractSolution.MSCRMExtractSolution@10
  displayName: 'MSCRM Extract Solution'
  inputs:
    unpackedFilesFolder: '$(Build.SourcesDirectory)\src\$(SolutionName).Solution\Solution'
    packageType: 'Both'
    solutionFile: '$(Agent.TempDirectory)\$(SolutionName).zip'
    localize: false


- powershell: |    
    npm install jsonlint -g
    Get-ChildItem src/$(SolutionName).Solution/Solution/Workflows -Filter *.json | foreach { 
      echo "Linting $_.Name"
      jsonlint $_.FullName --in-place 
    }
  displayName: 'Lint JSON Workflows'

- task: DotNetCoreCLI@2
  displayName: 'Lint Solution Files'
  inputs:
    command: 'custom'
    custom: 'WARP.XrmSolutionAssistant/WARP.XrmSolutionAssistant.Console.dll'
    arguments: './Solution'
    workingDirectory: '$(Build.SourcesDirectory)/src/$(SolutionName).Solution'

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/XrmDefinitelyTyped/packages.config'
    feedsToUse: 'select'
    restoreDirectory: '../packages'
  displayName: 'Restore XrmDefinitelyTyped project packages'

- task: PowerShell@2
  displayName: 'Update TypeScript Entities'
  inputs:
    filePath: 'src/XrmDefinitelyTyped/get_XrmDefinitelyTyped.ps1'
    arguments: '-NonInteractive -Url $(crm.url) -UserName "$(crm.username)" -Password "$(crm.password)" -Solution "$(SolutionName)"'
    workingDirectory: 'src/XrmDefinitelyTyped'

- task: NuGetCommand@2
  displayName: 'Restore CrmSvcUtil.Filter project packages'
  inputs:
    command: 'restore'
    restoreSolution: '**/CrmSvcUtil.Filter/packages.config'
    feedsToUse: 'select'
    restoreDirectory: '../packages'

- task: MSBuild@1
  displayName: 'Build CrmSvcUtil.Filter'
  inputs:
    solution: '**/CrmSvcUtil.Filter.csproj'

- task: PowerShell@2
  displayName: 'Update C# Early-Bound Entities'
  inputs:
    filePath: 'src/CrmSvcUtil.Filter/generate_earlybound_entities.ps1'
    arguments: '-NonInteractive -Url $(crm.url) -UserName "$(crm.username)" -Password "$(crm.password)"'
    workingDirectory: 'src/CrmSvcUtil.Filter'

- task: PowerShell@2
  displayName: 'Update C# Early-Bound Option Sets'
  inputs:
    filePath: 'src/CrmSvcUtil.Filter/generate_optionset_enums.ps1'
    arguments: '-NonInteractive -Url $(crm.url) -UserName "$(crm.username)" -Password "$(crm.password)"'
    workingDirectory: 'src/CrmSvcUtil.Filter'

- powershell: |
   $branch = "$(Build.SourceBranch)"
   $branch = $branch.Replace("refs/heads/", "")
   
   echo "Committing all CDS solution changes"
   git config user.email "nepasrepondre-noreply@priv.gc.ca"
   git config user.name "opc-buildbot"
   git checkout $branch
   git add --all
   git commit -m "Update Solution - $(SolutionName): $(CommitMessage)"
   
   echo "Push solution changes to the remote repository"
   git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin $branch
  displayName: 'Commit Unpacked Solution to the Repository'
