trigger: none

pr: none

pool:
  vmImage: 'vs2017-win2016'
parameters:
  - name: tenant
    displayName: Tenant
    type: string
    default: 'prod-tenant'
    values:
    - 'prod-tenant'
    - 'dev-tenant'

variables:
  - group: ${{ parameters.tenant }}
  - name: SolutionName
    value: 'Compliance' 

steps:
- checkout: self
  persistCredentials: true

- task: PowerShell@2
  displayName: 'Unpublish all duplicate rules to be able to export them'
  inputs:
    filePath: 'src/$(SolutionName).Package/set_duplicaterule_publishstate.ps1'
    arguments: '-ConnectionString "AuthType=ClientSecret;Url=$(crm.url);ClientId=$(tenant.appId);ClientSecret=$(tenant.secret)" -PublishState "unpublished"'
    workingDirectory: 'src/$(SolutionName).Package'

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMToolInstaller.MSCRMToolInstaller@9
  displayName: 'MSCRM Tool Installer'

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMExportCMData.MSCRMExportCMData@9
  displayName: 'MSCRM Export Configuration Migration Data'
  inputs:
    crmConnectionString: 'AuthType=ClientSecret;Url=$(crm.url);ClientId=$(tenant.appId);ClientSecret=$(tenant.secret)'
    schemaFile: src/$(SolutionName).Solution/lookups-schema.xml
    dataFile: '$(Agent.TempDirectory)/data.zip'

- task: PowerShell@2
  displayName: 'Republish all duplicate rules to set them ot their original state'
  inputs:
    filePath: 'src/$(SolutionName).Package/set_duplicaterule_publishstate.ps1'
    arguments: '-ConnectionString "AuthType=ClientSecret;Url=$(crm.url);ClientId=$(tenant.appId);ClientSecret=$(tenant.secret)" -PublishState "published"'
    workingDirectory: 'src/$(SolutionName).Package'
  condition: always()

- task: WaelHamze.xrm-ci-framework-build-tasks.MSCRMExtractCMData.MSCRMExtractCMData@9
  displayName: 'MSCRM Extract Configuration Migration Data'
  inputs:
    dataFile: '$(Agent.TempDirectory)/data.zip'
    extractFolder: src/$(SolutionName).Solution/Data/Lookups
    sortExtractedData: true
    splitExtractedData: false

- powershell: |
   $branch = "$(Build.SourceBranch)"
      $branch = $branch.Replace("refs/heads/", "")

      echo "Commit all changes"
      git config user.email "nepasrepondre-noreply@priv.gc.ca"
      git config user.name "opc-buildbot"
      git checkout $branch
      git add --all
      git commit -m "Update Solution - $(SolutionName): $(CommitMessage)"

      echo "Push solution changes to the remote repository"
      git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin $branch
  displayName: 'Commit Unpacked Solution Data to the Repository'
